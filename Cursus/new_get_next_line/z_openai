char	*ft_strdup(char *buf, int bufstart)
{
	char	*dup;

	if (!*buf)
		dup = malloc(sizeof(char));
	else 
		dup = malloc(sizeof(char) * (ft_strlen(buf) + 1 - bufstart));
	if (!dup)
		return (NULL);
	while (buf[bufstart])
	{
		dup[bufstart] = buf[bufstart];
		bufstart++;
	}
	dup[bufstart] = '\0';
	return (dup);
}

char	*ft_strjoin(char *s1, char *s2, int bufstart)
{
	char	*str;
	int	i;
	int	j;

	i = 0;
	j = 0;
	if (!s1)
		return (ft_strdup(s2, bufstart));
	str = malloc(((ft_strlen(s1) + ft_strlen(s2)) + 1) * sizeof(char));
	if (!str)
		return (NULL);
	while (s1[j])
		str[i++] = s1[j++];
	while (s2[bufstart] && s2[bufstart] && s2[bufstart] != '\n')
		str[i++] = s2[bufstart++];
	str[i] = '\0';
	free(s1);
	return (str);
}

int	ft_strlen(const char *s)
{
	int	i;

	i = 0;
	if(!s)
		return (0);
	while (s[i] && s[i] != '\n')
		i++;
	return (i);
}

int	nextlen(const char *s, int i)
{
	int	len;

	if(!s || i < 0)
		return (0);
	len = 0;
	while (s[i] != '\n' && s[i])
	{
		len++;
		i++;
	}
	if (!s[i])
		return (len - 1);
	return (len);
}

char	*ft_substr(char const *s, int start, int len)
{
	char	*cpy;
	int		i;
	int		slen;

	slen = 0;
	i = 0;
	if (!s || !len)
		return (NULL);
	while(s[slen])
		slen++;
	if (start >= slen)
		len = 0;
	if (slen - start < len)
		len = slen - start;
	cpy = malloc(sizeof(char) * len + 1);
	if (!cpy)
		return (NULL);
	while (len-- && s[start])
		cpy[i++] = s[start++];
	cpy[i] = '\0';
	return (cpy);
}

int	check_nl(char *buf, int *stop)
{
	int i = -1;

	if (!*stop)
		return 0;
	while(i++ < BUFFER_SIZE - 1 && *stop)
	{
		if ((buf[i] == '\n' || buf[i] == '\0'))
			*stop += -1;
	}
	return (1);
}

int	bufstart(char *buf, int stop)
{
	int start;

	start = 0;
	if(stop == 1)
	{
		while(buf[start] != '\n' && start < BUFFER_SIZE)
			start++;
	}
	return (start);
}

char	*get_next_line(int fd)
{
	static char	*buf;
	char		*line = NULL;
	int			bufend;
	int 		stop;

	stop = 2;
	if(fd < 0 || BUFFER_SIZE < 1)
		return (NULL);
	if (!buf)
	{
		stop = 1;
		buf = malloc(sizeof(char) * (BUFFER_SIZE + 1));
		if (!buf)
			return NULL;
		bufend = read(fd, buf, BUFFER_SIZE);
	}
	while (check_nl(buf, &stop) && bufend > 0)
	{
		buf[bufend] = '\0';
		line = ft_strjoin(line, buf, bufstart(buf, stop));
		if (stop)
			bufend = read(fd, buf, BUFFER_SIZE);
	}
	if (line)
		return (line);
	return (NULL);
}

int main()
{
	int fd;
	char *line;

	fd = open("text.txt", O_RDONLY);
	line = get_next_line(fd);
	printf("%s", line);

	while (1)
	{
		line = get_next_line(fd);
		if (line == NULL)
			break;
		printf("%s", line);
	}
	return 0;
}